type Query {
  info: String!
  board(id: ID!): Board!
  boards: [Board!]!
  columns: [Column!]!
  # feed(filter: String, skip: Int, first: Int, orderBy: LinkOrderByInput): Feed!
}

type Mutation {
  signup(email: String!, password: String!, name: String!): AuthPayload
  login(email: String!, password: String!): AuthPayload

  createBoard(title: String!, backgroundColor: String!): Board!
  updateBoard(id: ID!, title: String, backgroundColor: String): Board!
  # deleteBoard(id: ID!): ID!

  createColumn(title: String!, position: Int!, boardId: ID!): Column!
  updateColumn(id: ID!, title: String, position: Int): Column!
  # deleteColumn(id: ID!): ID!

  createTask(
    title: String!
    description: String
    position: Int!
    columnId: ID!
  ): Task!
  updateTask(title: String, description: String, position: Int, id: ID!): Task!
  # deleteTask(id: ID!): ID!
}

type Subscription {
  boardSub(id: ID): Board
  #   onUpdateBoard: Board!
  #   onDeleteBoard: ID!

  #   onCreateColumn: Column!
}

type Board {
  id: ID!
  title: String!
  backgroundColor: String!
  createdBy: User!
  createdAt: Int!
  updatedAt: Int!
  columns: [Column!]!
  columnCount: Int!
  taskCount: Int!
}

type Column {
  id: ID!
  title: String!
  position: Int!
  createdBy: User!
  createdAt: Int!
  updatedAt: Int!
  board: Board!
  tasks: [Task!]!
}

type Task {
  id: ID!
  title: String!
  description: String
  position: Int!
  createdBy: User!
  createdAt: Int!
  updatedAt: Int!
  column: Column!
}

type AuthPayload {
  token: String
  user: User
}

type User {
  id: ID!
  name: String!
  email: String!
}

enum LinkOrderByInput {
  description_ASC
  description_DESC
  url_ASC
  url_DESC
  createdAt_ASC
  createdAt_DESC
}
