module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateBoard {
  count: Int!
}

type AggregateColumn {
  count: Int!
}

type AggregateTask {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Board {
  id: ID!
  title: String!
  backgroundColor: String!
  createdBy: User!
  createdAt: Int!
  updatedAt: Int!
  columns(where: ColumnWhereInput, orderBy: ColumnOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Column!]
}

type BoardConnection {
  pageInfo: PageInfo!
  edges: [BoardEdge]!
  aggregate: AggregateBoard!
}

input BoardCreateInput {
  id: ID
  title: String!
  backgroundColor: String!
  createdBy: UserCreateOneInput!
  columns: ColumnCreateManyWithoutBoardInput
}

input BoardCreateOneWithoutColumnsInput {
  create: BoardCreateWithoutColumnsInput
  connect: BoardWhereUniqueInput
}

input BoardCreateWithoutColumnsInput {
  id: ID
  title: String!
  backgroundColor: String!
  createdBy: UserCreateOneInput!
}

type BoardEdge {
  node: Board!
  cursor: String!
}

enum BoardOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  backgroundColor_ASC
  backgroundColor_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type BoardPreviousValues {
  id: ID!
  title: String!
  backgroundColor: String!
  createdAt: Int!
  updatedAt: Int!
}

type BoardSubscriptionPayload {
  mutation: MutationType!
  node: Board
  updatedFields: [String!]
  previousValues: BoardPreviousValues
}

input BoardSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BoardWhereInput
  AND: [BoardSubscriptionWhereInput!]
  OR: [BoardSubscriptionWhereInput!]
  NOT: [BoardSubscriptionWhereInput!]
}

input BoardUpdateInput {
  title: String
  backgroundColor: String
  createdBy: UserUpdateOneRequiredInput
  columns: ColumnUpdateManyWithoutBoardInput
}

input BoardUpdateManyMutationInput {
  title: String
  backgroundColor: String
}

input BoardUpdateOneRequiredWithoutColumnsInput {
  create: BoardCreateWithoutColumnsInput
  update: BoardUpdateWithoutColumnsDataInput
  upsert: BoardUpsertWithoutColumnsInput
  connect: BoardWhereUniqueInput
}

input BoardUpdateWithoutColumnsDataInput {
  title: String
  backgroundColor: String
  createdBy: UserUpdateOneRequiredInput
}

input BoardUpsertWithoutColumnsInput {
  update: BoardUpdateWithoutColumnsDataInput!
  create: BoardCreateWithoutColumnsInput!
}

input BoardWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  backgroundColor: String
  backgroundColor_not: String
  backgroundColor_in: [String!]
  backgroundColor_not_in: [String!]
  backgroundColor_lt: String
  backgroundColor_lte: String
  backgroundColor_gt: String
  backgroundColor_gte: String
  backgroundColor_contains: String
  backgroundColor_not_contains: String
  backgroundColor_starts_with: String
  backgroundColor_not_starts_with: String
  backgroundColor_ends_with: String
  backgroundColor_not_ends_with: String
  createdBy: UserWhereInput
  createdAt: Int
  createdAt_not: Int
  createdAt_in: [Int!]
  createdAt_not_in: [Int!]
  createdAt_lt: Int
  createdAt_lte: Int
  createdAt_gt: Int
  createdAt_gte: Int
  updatedAt: Int
  updatedAt_not: Int
  updatedAt_in: [Int!]
  updatedAt_not_in: [Int!]
  updatedAt_lt: Int
  updatedAt_lte: Int
  updatedAt_gt: Int
  updatedAt_gte: Int
  columns_every: ColumnWhereInput
  columns_some: ColumnWhereInput
  columns_none: ColumnWhereInput
  AND: [BoardWhereInput!]
  OR: [BoardWhereInput!]
  NOT: [BoardWhereInput!]
}

input BoardWhereUniqueInput {
  id: ID
}

type Column {
  id: ID!
  title: String!
  position: Int!
  createdBy: User!
  createdAt: Int!
  updatedAt: Int!
  board: Board!
  tasks(where: TaskWhereInput, orderBy: TaskOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Task!]
}

type ColumnConnection {
  pageInfo: PageInfo!
  edges: [ColumnEdge]!
  aggregate: AggregateColumn!
}

input ColumnCreateInput {
  id: ID
  title: String!
  position: Int!
  createdBy: UserCreateOneInput!
  board: BoardCreateOneWithoutColumnsInput!
  tasks: TaskCreateManyWithoutColumnInput
}

input ColumnCreateManyWithoutBoardInput {
  create: [ColumnCreateWithoutBoardInput!]
  connect: [ColumnWhereUniqueInput!]
}

input ColumnCreateOneWithoutTasksInput {
  create: ColumnCreateWithoutTasksInput
  connect: ColumnWhereUniqueInput
}

input ColumnCreateWithoutBoardInput {
  id: ID
  title: String!
  position: Int!
  createdBy: UserCreateOneInput!
  tasks: TaskCreateManyWithoutColumnInput
}

input ColumnCreateWithoutTasksInput {
  id: ID
  title: String!
  position: Int!
  createdBy: UserCreateOneInput!
  board: BoardCreateOneWithoutColumnsInput!
}

type ColumnEdge {
  node: Column!
  cursor: String!
}

enum ColumnOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  position_ASC
  position_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ColumnPreviousValues {
  id: ID!
  title: String!
  position: Int!
  createdAt: Int!
  updatedAt: Int!
}

input ColumnScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  position: Int
  position_not: Int
  position_in: [Int!]
  position_not_in: [Int!]
  position_lt: Int
  position_lte: Int
  position_gt: Int
  position_gte: Int
  createdAt: Int
  createdAt_not: Int
  createdAt_in: [Int!]
  createdAt_not_in: [Int!]
  createdAt_lt: Int
  createdAt_lte: Int
  createdAt_gt: Int
  createdAt_gte: Int
  updatedAt: Int
  updatedAt_not: Int
  updatedAt_in: [Int!]
  updatedAt_not_in: [Int!]
  updatedAt_lt: Int
  updatedAt_lte: Int
  updatedAt_gt: Int
  updatedAt_gte: Int
  AND: [ColumnScalarWhereInput!]
  OR: [ColumnScalarWhereInput!]
  NOT: [ColumnScalarWhereInput!]
}

type ColumnSubscriptionPayload {
  mutation: MutationType!
  node: Column
  updatedFields: [String!]
  previousValues: ColumnPreviousValues
}

input ColumnSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ColumnWhereInput
  AND: [ColumnSubscriptionWhereInput!]
  OR: [ColumnSubscriptionWhereInput!]
  NOT: [ColumnSubscriptionWhereInput!]
}

input ColumnUpdateInput {
  title: String
  position: Int
  createdBy: UserUpdateOneRequiredInput
  board: BoardUpdateOneRequiredWithoutColumnsInput
  tasks: TaskUpdateManyWithoutColumnInput
}

input ColumnUpdateManyDataInput {
  title: String
  position: Int
}

input ColumnUpdateManyMutationInput {
  title: String
  position: Int
}

input ColumnUpdateManyWithoutBoardInput {
  create: [ColumnCreateWithoutBoardInput!]
  delete: [ColumnWhereUniqueInput!]
  connect: [ColumnWhereUniqueInput!]
  set: [ColumnWhereUniqueInput!]
  disconnect: [ColumnWhereUniqueInput!]
  update: [ColumnUpdateWithWhereUniqueWithoutBoardInput!]
  upsert: [ColumnUpsertWithWhereUniqueWithoutBoardInput!]
  deleteMany: [ColumnScalarWhereInput!]
  updateMany: [ColumnUpdateManyWithWhereNestedInput!]
}

input ColumnUpdateManyWithWhereNestedInput {
  where: ColumnScalarWhereInput!
  data: ColumnUpdateManyDataInput!
}

input ColumnUpdateOneRequiredWithoutTasksInput {
  create: ColumnCreateWithoutTasksInput
  update: ColumnUpdateWithoutTasksDataInput
  upsert: ColumnUpsertWithoutTasksInput
  connect: ColumnWhereUniqueInput
}

input ColumnUpdateWithoutBoardDataInput {
  title: String
  position: Int
  createdBy: UserUpdateOneRequiredInput
  tasks: TaskUpdateManyWithoutColumnInput
}

input ColumnUpdateWithoutTasksDataInput {
  title: String
  position: Int
  createdBy: UserUpdateOneRequiredInput
  board: BoardUpdateOneRequiredWithoutColumnsInput
}

input ColumnUpdateWithWhereUniqueWithoutBoardInput {
  where: ColumnWhereUniqueInput!
  data: ColumnUpdateWithoutBoardDataInput!
}

input ColumnUpsertWithoutTasksInput {
  update: ColumnUpdateWithoutTasksDataInput!
  create: ColumnCreateWithoutTasksInput!
}

input ColumnUpsertWithWhereUniqueWithoutBoardInput {
  where: ColumnWhereUniqueInput!
  update: ColumnUpdateWithoutBoardDataInput!
  create: ColumnCreateWithoutBoardInput!
}

input ColumnWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  position: Int
  position_not: Int
  position_in: [Int!]
  position_not_in: [Int!]
  position_lt: Int
  position_lte: Int
  position_gt: Int
  position_gte: Int
  createdBy: UserWhereInput
  createdAt: Int
  createdAt_not: Int
  createdAt_in: [Int!]
  createdAt_not_in: [Int!]
  createdAt_lt: Int
  createdAt_lte: Int
  createdAt_gt: Int
  createdAt_gte: Int
  updatedAt: Int
  updatedAt_not: Int
  updatedAt_in: [Int!]
  updatedAt_not_in: [Int!]
  updatedAt_lt: Int
  updatedAt_lte: Int
  updatedAt_gt: Int
  updatedAt_gte: Int
  board: BoardWhereInput
  tasks_every: TaskWhereInput
  tasks_some: TaskWhereInput
  tasks_none: TaskWhereInput
  AND: [ColumnWhereInput!]
  OR: [ColumnWhereInput!]
  NOT: [ColumnWhereInput!]
}

input ColumnWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createBoard(data: BoardCreateInput!): Board!
  updateBoard(data: BoardUpdateInput!, where: BoardWhereUniqueInput!): Board
  updateManyBoards(data: BoardUpdateManyMutationInput!, where: BoardWhereInput): BatchPayload!
  upsertBoard(where: BoardWhereUniqueInput!, create: BoardCreateInput!, update: BoardUpdateInput!): Board!
  deleteBoard(where: BoardWhereUniqueInput!): Board
  deleteManyBoards(where: BoardWhereInput): BatchPayload!
  createColumn(data: ColumnCreateInput!): Column!
  updateColumn(data: ColumnUpdateInput!, where: ColumnWhereUniqueInput!): Column
  updateManyColumns(data: ColumnUpdateManyMutationInput!, where: ColumnWhereInput): BatchPayload!
  upsertColumn(where: ColumnWhereUniqueInput!, create: ColumnCreateInput!, update: ColumnUpdateInput!): Column!
  deleteColumn(where: ColumnWhereUniqueInput!): Column
  deleteManyColumns(where: ColumnWhereInput): BatchPayload!
  createTask(data: TaskCreateInput!): Task!
  updateTask(data: TaskUpdateInput!, where: TaskWhereUniqueInput!): Task
  updateManyTasks(data: TaskUpdateManyMutationInput!, where: TaskWhereInput): BatchPayload!
  upsertTask(where: TaskWhereUniqueInput!, create: TaskCreateInput!, update: TaskUpdateInput!): Task!
  deleteTask(where: TaskWhereUniqueInput!): Task
  deleteManyTasks(where: TaskWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  board(where: BoardWhereUniqueInput!): Board
  boards(where: BoardWhereInput, orderBy: BoardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Board]!
  boardsConnection(where: BoardWhereInput, orderBy: BoardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BoardConnection!
  column(where: ColumnWhereUniqueInput!): Column
  columns(where: ColumnWhereInput, orderBy: ColumnOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Column]!
  columnsConnection(where: ColumnWhereInput, orderBy: ColumnOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ColumnConnection!
  task(where: TaskWhereUniqueInput!): Task
  tasks(where: TaskWhereInput, orderBy: TaskOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Task]!
  tasksConnection(where: TaskWhereInput, orderBy: TaskOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TaskConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  board(where: BoardSubscriptionWhereInput): BoardSubscriptionPayload
  column(where: ColumnSubscriptionWhereInput): ColumnSubscriptionPayload
  task(where: TaskSubscriptionWhereInput): TaskSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type Task {
  id: ID!
  title: String!
  description: String
  position: Int!
  createdBy: User!
  createdAt: Int!
  updatedAt: Int!
  column: Column!
}

type TaskConnection {
  pageInfo: PageInfo!
  edges: [TaskEdge]!
  aggregate: AggregateTask!
}

input TaskCreateInput {
  id: ID
  title: String!
  description: String
  position: Int!
  createdBy: UserCreateOneInput!
  column: ColumnCreateOneWithoutTasksInput!
}

input TaskCreateManyWithoutColumnInput {
  create: [TaskCreateWithoutColumnInput!]
  connect: [TaskWhereUniqueInput!]
}

input TaskCreateWithoutColumnInput {
  id: ID
  title: String!
  description: String
  position: Int!
  createdBy: UserCreateOneInput!
}

type TaskEdge {
  node: Task!
  cursor: String!
}

enum TaskOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  position_ASC
  position_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type TaskPreviousValues {
  id: ID!
  title: String!
  description: String
  position: Int!
  createdAt: Int!
  updatedAt: Int!
}

input TaskScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  position: Int
  position_not: Int
  position_in: [Int!]
  position_not_in: [Int!]
  position_lt: Int
  position_lte: Int
  position_gt: Int
  position_gte: Int
  createdAt: Int
  createdAt_not: Int
  createdAt_in: [Int!]
  createdAt_not_in: [Int!]
  createdAt_lt: Int
  createdAt_lte: Int
  createdAt_gt: Int
  createdAt_gte: Int
  updatedAt: Int
  updatedAt_not: Int
  updatedAt_in: [Int!]
  updatedAt_not_in: [Int!]
  updatedAt_lt: Int
  updatedAt_lte: Int
  updatedAt_gt: Int
  updatedAt_gte: Int
  AND: [TaskScalarWhereInput!]
  OR: [TaskScalarWhereInput!]
  NOT: [TaskScalarWhereInput!]
}

type TaskSubscriptionPayload {
  mutation: MutationType!
  node: Task
  updatedFields: [String!]
  previousValues: TaskPreviousValues
}

input TaskSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TaskWhereInput
  AND: [TaskSubscriptionWhereInput!]
  OR: [TaskSubscriptionWhereInput!]
  NOT: [TaskSubscriptionWhereInput!]
}

input TaskUpdateInput {
  title: String
  description: String
  position: Int
  createdBy: UserUpdateOneRequiredInput
  column: ColumnUpdateOneRequiredWithoutTasksInput
}

input TaskUpdateManyDataInput {
  title: String
  description: String
  position: Int
}

input TaskUpdateManyMutationInput {
  title: String
  description: String
  position: Int
}

input TaskUpdateManyWithoutColumnInput {
  create: [TaskCreateWithoutColumnInput!]
  delete: [TaskWhereUniqueInput!]
  connect: [TaskWhereUniqueInput!]
  set: [TaskWhereUniqueInput!]
  disconnect: [TaskWhereUniqueInput!]
  update: [TaskUpdateWithWhereUniqueWithoutColumnInput!]
  upsert: [TaskUpsertWithWhereUniqueWithoutColumnInput!]
  deleteMany: [TaskScalarWhereInput!]
  updateMany: [TaskUpdateManyWithWhereNestedInput!]
}

input TaskUpdateManyWithWhereNestedInput {
  where: TaskScalarWhereInput!
  data: TaskUpdateManyDataInput!
}

input TaskUpdateWithoutColumnDataInput {
  title: String
  description: String
  position: Int
  createdBy: UserUpdateOneRequiredInput
}

input TaskUpdateWithWhereUniqueWithoutColumnInput {
  where: TaskWhereUniqueInput!
  data: TaskUpdateWithoutColumnDataInput!
}

input TaskUpsertWithWhereUniqueWithoutColumnInput {
  where: TaskWhereUniqueInput!
  update: TaskUpdateWithoutColumnDataInput!
  create: TaskCreateWithoutColumnInput!
}

input TaskWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  position: Int
  position_not: Int
  position_in: [Int!]
  position_not_in: [Int!]
  position_lt: Int
  position_lte: Int
  position_gt: Int
  position_gte: Int
  createdBy: UserWhereInput
  createdAt: Int
  createdAt_not: Int
  createdAt_in: [Int!]
  createdAt_not_in: [Int!]
  createdAt_lt: Int
  createdAt_lte: Int
  createdAt_gt: Int
  createdAt_gte: Int
  updatedAt: Int
  updatedAt_not: Int
  updatedAt_in: [Int!]
  updatedAt_not_in: [Int!]
  updatedAt_lt: Int
  updatedAt_lte: Int
  updatedAt_gt: Int
  updatedAt_gte: Int
  column: ColumnWhereInput
  AND: [TaskWhereInput!]
  OR: [TaskWhereInput!]
  NOT: [TaskWhereInput!]
}

input TaskWhereUniqueInput {
  id: ID
}

type User {
  id: ID!
  name: String!
  email: String!
  password: String!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  email: String!
  password: String!
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  name: String
  email: String
  password: String
}

input UserUpdateInput {
  name: String
  email: String
  password: String
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  password: String
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  connect: UserWhereUniqueInput
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`
      }
    