// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  board: (where?: BoardWhereInput) => Promise<boolean>;
  column: (where?: ColumnWhereInput) => Promise<boolean>;
  task: (where?: TaskWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  board: (where: BoardWhereUniqueInput) => BoardNullablePromise;
  boards: (args?: {
    where?: BoardWhereInput;
    orderBy?: BoardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Board>;
  boardsConnection: (args?: {
    where?: BoardWhereInput;
    orderBy?: BoardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => BoardConnectionPromise;
  column: (where: ColumnWhereUniqueInput) => ColumnNullablePromise;
  columns: (args?: {
    where?: ColumnWhereInput;
    orderBy?: ColumnOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Column>;
  columnsConnection: (args?: {
    where?: ColumnWhereInput;
    orderBy?: ColumnOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ColumnConnectionPromise;
  task: (where: TaskWhereUniqueInput) => TaskNullablePromise;
  tasks: (args?: {
    where?: TaskWhereInput;
    orderBy?: TaskOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Task>;
  tasksConnection: (args?: {
    where?: TaskWhereInput;
    orderBy?: TaskOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TaskConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createBoard: (data: BoardCreateInput) => BoardPromise;
  updateBoard: (args: {
    data: BoardUpdateInput;
    where: BoardWhereUniqueInput;
  }) => BoardPromise;
  updateManyBoards: (args: {
    data: BoardUpdateManyMutationInput;
    where?: BoardWhereInput;
  }) => BatchPayloadPromise;
  upsertBoard: (args: {
    where: BoardWhereUniqueInput;
    create: BoardCreateInput;
    update: BoardUpdateInput;
  }) => BoardPromise;
  deleteBoard: (where: BoardWhereUniqueInput) => BoardPromise;
  deleteManyBoards: (where?: BoardWhereInput) => BatchPayloadPromise;
  createColumn: (data: ColumnCreateInput) => ColumnPromise;
  updateColumn: (args: {
    data: ColumnUpdateInput;
    where: ColumnWhereUniqueInput;
  }) => ColumnPromise;
  updateManyColumns: (args: {
    data: ColumnUpdateManyMutationInput;
    where?: ColumnWhereInput;
  }) => BatchPayloadPromise;
  upsertColumn: (args: {
    where: ColumnWhereUniqueInput;
    create: ColumnCreateInput;
    update: ColumnUpdateInput;
  }) => ColumnPromise;
  deleteColumn: (where: ColumnWhereUniqueInput) => ColumnPromise;
  deleteManyColumns: (where?: ColumnWhereInput) => BatchPayloadPromise;
  createTask: (data: TaskCreateInput) => TaskPromise;
  updateTask: (args: {
    data: TaskUpdateInput;
    where: TaskWhereUniqueInput;
  }) => TaskPromise;
  updateManyTasks: (args: {
    data: TaskUpdateManyMutationInput;
    where?: TaskWhereInput;
  }) => BatchPayloadPromise;
  upsertTask: (args: {
    where: TaskWhereUniqueInput;
    create: TaskCreateInput;
    update: TaskUpdateInput;
  }) => TaskPromise;
  deleteTask: (where: TaskWhereUniqueInput) => TaskPromise;
  deleteManyTasks: (where?: TaskWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  board: (
    where?: BoardSubscriptionWhereInput
  ) => BoardSubscriptionPayloadSubscription;
  column: (
    where?: ColumnSubscriptionWhereInput
  ) => ColumnSubscriptionPayloadSubscription;
  task: (
    where?: TaskSubscriptionWhereInput
  ) => TaskSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ColumnOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "position_ASC"
  | "position_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type TaskOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "description_ASC"
  | "description_DESC"
  | "position_ASC"
  | "position_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type BoardOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "backgroundColor_ASC"
  | "backgroundColor_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface ColumnUpdateWithWhereUniqueWithoutBoardInput {
  where: ColumnWhereUniqueInput;
  data: ColumnUpdateWithoutBoardDataInput;
}

export type BoardWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface TaskUpdateWithoutColumnDataInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  position?: Maybe<Int>;
  createdBy?: Maybe<UserUpdateOneRequiredInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface TaskUpsertWithWhereUniqueWithoutColumnInput {
  where: TaskWhereUniqueInput;
  update: TaskUpdateWithoutColumnDataInput;
  create: TaskCreateWithoutColumnInput;
}

export interface TaskWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  position?: Maybe<Int>;
  position_not?: Maybe<Int>;
  position_in?: Maybe<Int[] | Int>;
  position_not_in?: Maybe<Int[] | Int>;
  position_lt?: Maybe<Int>;
  position_lte?: Maybe<Int>;
  position_gt?: Maybe<Int>;
  position_gte?: Maybe<Int>;
  createdBy?: Maybe<UserWhereInput>;
  createdAt?: Maybe<Int>;
  createdAt_not?: Maybe<Int>;
  createdAt_in?: Maybe<Int[] | Int>;
  createdAt_not_in?: Maybe<Int[] | Int>;
  createdAt_lt?: Maybe<Int>;
  createdAt_lte?: Maybe<Int>;
  createdAt_gt?: Maybe<Int>;
  createdAt_gte?: Maybe<Int>;
  updatedAt?: Maybe<Int>;
  updatedAt_not?: Maybe<Int>;
  updatedAt_in?: Maybe<Int[] | Int>;
  updatedAt_not_in?: Maybe<Int[] | Int>;
  updatedAt_lt?: Maybe<Int>;
  updatedAt_lte?: Maybe<Int>;
  updatedAt_gt?: Maybe<Int>;
  updatedAt_gte?: Maybe<Int>;
  column?: Maybe<ColumnWhereInput>;
  AND?: Maybe<TaskWhereInput[] | TaskWhereInput>;
  OR?: Maybe<TaskWhereInput[] | TaskWhereInput>;
  NOT?: Maybe<TaskWhereInput[] | TaskWhereInput>;
}

export interface ColumnCreateManyWithoutBoardInput {
  create?: Maybe<
    ColumnCreateWithoutBoardInput[] | ColumnCreateWithoutBoardInput
  >;
  connect?: Maybe<ColumnWhereUniqueInput[] | ColumnWhereUniqueInput>;
}

export interface ColumnCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  position: Int;
  createdBy: UserCreateOneInput;
  board: BoardCreateOneWithoutColumnsInput;
  tasks?: Maybe<TaskCreateManyWithoutColumnInput>;
}

export interface ColumnCreateWithoutBoardInput {
  id?: Maybe<ID_Input>;
  title: String;
  position: Int;
  createdBy: UserCreateOneInput;
  tasks?: Maybe<TaskCreateManyWithoutColumnInput>;
}

export interface TaskScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  position?: Maybe<Int>;
  position_not?: Maybe<Int>;
  position_in?: Maybe<Int[] | Int>;
  position_not_in?: Maybe<Int[] | Int>;
  position_lt?: Maybe<Int>;
  position_lte?: Maybe<Int>;
  position_gt?: Maybe<Int>;
  position_gte?: Maybe<Int>;
  createdAt?: Maybe<Int>;
  createdAt_not?: Maybe<Int>;
  createdAt_in?: Maybe<Int[] | Int>;
  createdAt_not_in?: Maybe<Int[] | Int>;
  createdAt_lt?: Maybe<Int>;
  createdAt_lte?: Maybe<Int>;
  createdAt_gt?: Maybe<Int>;
  createdAt_gte?: Maybe<Int>;
  updatedAt?: Maybe<Int>;
  updatedAt_not?: Maybe<Int>;
  updatedAt_in?: Maybe<Int[] | Int>;
  updatedAt_not_in?: Maybe<Int[] | Int>;
  updatedAt_lt?: Maybe<Int>;
  updatedAt_lte?: Maybe<Int>;
  updatedAt_gt?: Maybe<Int>;
  updatedAt_gte?: Maybe<Int>;
  AND?: Maybe<TaskScalarWhereInput[] | TaskScalarWhereInput>;
  OR?: Maybe<TaskScalarWhereInput[] | TaskScalarWhereInput>;
  NOT?: Maybe<TaskScalarWhereInput[] | TaskScalarWhereInput>;
}

export interface TaskCreateManyWithoutColumnInput {
  create?: Maybe<TaskCreateWithoutColumnInput[] | TaskCreateWithoutColumnInput>;
  connect?: Maybe<TaskWhereUniqueInput[] | TaskWhereUniqueInput>;
}

export interface TaskSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TaskWhereInput>;
  AND?: Maybe<TaskSubscriptionWhereInput[] | TaskSubscriptionWhereInput>;
  OR?: Maybe<TaskSubscriptionWhereInput[] | TaskSubscriptionWhereInput>;
  NOT?: Maybe<TaskSubscriptionWhereInput[] | TaskSubscriptionWhereInput>;
}

export interface TaskCreateWithoutColumnInput {
  id?: Maybe<ID_Input>;
  title: String;
  description?: Maybe<String>;
  position: Int;
  createdBy: UserCreateOneInput;
}

export interface BoardSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<BoardWhereInput>;
  AND?: Maybe<BoardSubscriptionWhereInput[] | BoardSubscriptionWhereInput>;
  OR?: Maybe<BoardSubscriptionWhereInput[] | BoardSubscriptionWhereInput>;
  NOT?: Maybe<BoardSubscriptionWhereInput[] | BoardSubscriptionWhereInput>;
}

export interface BoardUpdateInput {
  title?: Maybe<String>;
  backgroundColor?: Maybe<String>;
  createdBy?: Maybe<UserUpdateOneRequiredInput>;
  columns?: Maybe<ColumnUpdateManyWithoutBoardInput>;
}

export interface UserUpdateInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
}

export interface UserUpdateOneRequiredInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export type ColumnWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserUpdateDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
}

export interface ColumnUpdateWithoutTasksDataInput {
  title?: Maybe<String>;
  position?: Maybe<Int>;
  createdBy?: Maybe<UserUpdateOneRequiredInput>;
  board?: Maybe<BoardUpdateOneRequiredWithoutColumnsInput>;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export type TaskWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ColumnUpdateManyWithoutBoardInput {
  create?: Maybe<
    ColumnCreateWithoutBoardInput[] | ColumnCreateWithoutBoardInput
  >;
  delete?: Maybe<ColumnWhereUniqueInput[] | ColumnWhereUniqueInput>;
  connect?: Maybe<ColumnWhereUniqueInput[] | ColumnWhereUniqueInput>;
  set?: Maybe<ColumnWhereUniqueInput[] | ColumnWhereUniqueInput>;
  disconnect?: Maybe<ColumnWhereUniqueInput[] | ColumnWhereUniqueInput>;
  update?: Maybe<
    | ColumnUpdateWithWhereUniqueWithoutBoardInput[]
    | ColumnUpdateWithWhereUniqueWithoutBoardInput
  >;
  upsert?: Maybe<
    | ColumnUpsertWithWhereUniqueWithoutBoardInput[]
    | ColumnUpsertWithWhereUniqueWithoutBoardInput
  >;
  deleteMany?: Maybe<ColumnScalarWhereInput[] | ColumnScalarWhereInput>;
  updateMany?: Maybe<
    | ColumnUpdateManyWithWhereNestedInput[]
    | ColumnUpdateManyWithWhereNestedInput
  >;
}

export interface ColumnCreateWithoutTasksInput {
  id?: Maybe<ID_Input>;
  title: String;
  position: Int;
  createdBy: UserCreateOneInput;
  board: BoardCreateOneWithoutColumnsInput;
}

export interface BoardUpdateOneRequiredWithoutColumnsInput {
  create?: Maybe<BoardCreateWithoutColumnsInput>;
  update?: Maybe<BoardUpdateWithoutColumnsDataInput>;
  upsert?: Maybe<BoardUpsertWithoutColumnsInput>;
  connect?: Maybe<BoardWhereUniqueInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface ColumnUpdateWithoutBoardDataInput {
  title?: Maybe<String>;
  position?: Maybe<Int>;
  createdBy?: Maybe<UserUpdateOneRequiredInput>;
  tasks?: Maybe<TaskUpdateManyWithoutColumnInput>;
}

export interface ColumnUpdateManyMutationInput {
  title?: Maybe<String>;
  position?: Maybe<Int>;
}

export interface TaskUpdateManyWithoutColumnInput {
  create?: Maybe<TaskCreateWithoutColumnInput[] | TaskCreateWithoutColumnInput>;
  delete?: Maybe<TaskWhereUniqueInput[] | TaskWhereUniqueInput>;
  connect?: Maybe<TaskWhereUniqueInput[] | TaskWhereUniqueInput>;
  set?: Maybe<TaskWhereUniqueInput[] | TaskWhereUniqueInput>;
  disconnect?: Maybe<TaskWhereUniqueInput[] | TaskWhereUniqueInput>;
  update?: Maybe<
    | TaskUpdateWithWhereUniqueWithoutColumnInput[]
    | TaskUpdateWithWhereUniqueWithoutColumnInput
  >;
  upsert?: Maybe<
    | TaskUpsertWithWhereUniqueWithoutColumnInput[]
    | TaskUpsertWithWhereUniqueWithoutColumnInput
  >;
  deleteMany?: Maybe<TaskScalarWhereInput[] | TaskScalarWhereInput>;
  updateMany?: Maybe<
    TaskUpdateManyWithWhereNestedInput[] | TaskUpdateManyWithWhereNestedInput
  >;
}

export interface BoardUpdateWithoutColumnsDataInput {
  title?: Maybe<String>;
  backgroundColor?: Maybe<String>;
  createdBy?: Maybe<UserUpdateOneRequiredInput>;
}

export interface TaskUpdateWithWhereUniqueWithoutColumnInput {
  where: TaskWhereUniqueInput;
  data: TaskUpdateWithoutColumnDataInput;
}

export interface BoardCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  backgroundColor: String;
  createdBy: UserCreateOneInput;
  columns?: Maybe<ColumnCreateManyWithoutBoardInput>;
}

export interface BoardWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  backgroundColor?: Maybe<String>;
  backgroundColor_not?: Maybe<String>;
  backgroundColor_in?: Maybe<String[] | String>;
  backgroundColor_not_in?: Maybe<String[] | String>;
  backgroundColor_lt?: Maybe<String>;
  backgroundColor_lte?: Maybe<String>;
  backgroundColor_gt?: Maybe<String>;
  backgroundColor_gte?: Maybe<String>;
  backgroundColor_contains?: Maybe<String>;
  backgroundColor_not_contains?: Maybe<String>;
  backgroundColor_starts_with?: Maybe<String>;
  backgroundColor_not_starts_with?: Maybe<String>;
  backgroundColor_ends_with?: Maybe<String>;
  backgroundColor_not_ends_with?: Maybe<String>;
  createdBy?: Maybe<UserWhereInput>;
  createdAt?: Maybe<Int>;
  createdAt_not?: Maybe<Int>;
  createdAt_in?: Maybe<Int[] | Int>;
  createdAt_not_in?: Maybe<Int[] | Int>;
  createdAt_lt?: Maybe<Int>;
  createdAt_lte?: Maybe<Int>;
  createdAt_gt?: Maybe<Int>;
  createdAt_gte?: Maybe<Int>;
  updatedAt?: Maybe<Int>;
  updatedAt_not?: Maybe<Int>;
  updatedAt_in?: Maybe<Int[] | Int>;
  updatedAt_not_in?: Maybe<Int[] | Int>;
  updatedAt_lt?: Maybe<Int>;
  updatedAt_lte?: Maybe<Int>;
  updatedAt_gt?: Maybe<Int>;
  updatedAt_gte?: Maybe<Int>;
  columns_every?: Maybe<ColumnWhereInput>;
  columns_some?: Maybe<ColumnWhereInput>;
  columns_none?: Maybe<ColumnWhereInput>;
  AND?: Maybe<BoardWhereInput[] | BoardWhereInput>;
  OR?: Maybe<BoardWhereInput[] | BoardWhereInput>;
  NOT?: Maybe<BoardWhereInput[] | BoardWhereInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
}

export interface ColumnWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  position?: Maybe<Int>;
  position_not?: Maybe<Int>;
  position_in?: Maybe<Int[] | Int>;
  position_not_in?: Maybe<Int[] | Int>;
  position_lt?: Maybe<Int>;
  position_lte?: Maybe<Int>;
  position_gt?: Maybe<Int>;
  position_gte?: Maybe<Int>;
  createdBy?: Maybe<UserWhereInput>;
  createdAt?: Maybe<Int>;
  createdAt_not?: Maybe<Int>;
  createdAt_in?: Maybe<Int[] | Int>;
  createdAt_not_in?: Maybe<Int[] | Int>;
  createdAt_lt?: Maybe<Int>;
  createdAt_lte?: Maybe<Int>;
  createdAt_gt?: Maybe<Int>;
  createdAt_gte?: Maybe<Int>;
  updatedAt?: Maybe<Int>;
  updatedAt_not?: Maybe<Int>;
  updatedAt_in?: Maybe<Int[] | Int>;
  updatedAt_not_in?: Maybe<Int[] | Int>;
  updatedAt_lt?: Maybe<Int>;
  updatedAt_lte?: Maybe<Int>;
  updatedAt_gt?: Maybe<Int>;
  updatedAt_gte?: Maybe<Int>;
  board?: Maybe<BoardWhereInput>;
  tasks_every?: Maybe<TaskWhereInput>;
  tasks_some?: Maybe<TaskWhereInput>;
  tasks_none?: Maybe<TaskWhereInput>;
  AND?: Maybe<ColumnWhereInput[] | ColumnWhereInput>;
  OR?: Maybe<ColumnWhereInput[] | ColumnWhereInput>;
  NOT?: Maybe<ColumnWhereInput[] | ColumnWhereInput>;
}

export interface ColumnSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ColumnWhereInput>;
  AND?: Maybe<ColumnSubscriptionWhereInput[] | ColumnSubscriptionWhereInput>;
  OR?: Maybe<ColumnSubscriptionWhereInput[] | ColumnSubscriptionWhereInput>;
  NOT?: Maybe<ColumnSubscriptionWhereInput[] | ColumnSubscriptionWhereInput>;
}

export interface ColumnUpdateInput {
  title?: Maybe<String>;
  position?: Maybe<Int>;
  createdBy?: Maybe<UserUpdateOneRequiredInput>;
  board?: Maybe<BoardUpdateOneRequiredWithoutColumnsInput>;
  tasks?: Maybe<TaskUpdateManyWithoutColumnInput>;
}

export interface TaskUpdateManyMutationInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  position?: Maybe<Int>;
}

export interface TaskUpdateManyWithWhereNestedInput {
  where: TaskScalarWhereInput;
  data: TaskUpdateManyDataInput;
}

export interface ColumnUpdateOneRequiredWithoutTasksInput {
  create?: Maybe<ColumnCreateWithoutTasksInput>;
  update?: Maybe<ColumnUpdateWithoutTasksDataInput>;
  upsert?: Maybe<ColumnUpsertWithoutTasksInput>;
  connect?: Maybe<ColumnWhereUniqueInput>;
}

export interface TaskUpdateManyDataInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  position?: Maybe<Int>;
}

export interface ColumnCreateOneWithoutTasksInput {
  create?: Maybe<ColumnCreateWithoutTasksInput>;
  connect?: Maybe<ColumnWhereUniqueInput>;
}

export interface ColumnUpsertWithWhereUniqueWithoutBoardInput {
  where: ColumnWhereUniqueInput;
  update: ColumnUpdateWithoutBoardDataInput;
  create: ColumnCreateWithoutBoardInput;
}

export interface BoardUpsertWithoutColumnsInput {
  update: BoardUpdateWithoutColumnsDataInput;
  create: BoardCreateWithoutColumnsInput;
}

export interface ColumnScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  position?: Maybe<Int>;
  position_not?: Maybe<Int>;
  position_in?: Maybe<Int[] | Int>;
  position_not_in?: Maybe<Int[] | Int>;
  position_lt?: Maybe<Int>;
  position_lte?: Maybe<Int>;
  position_gt?: Maybe<Int>;
  position_gte?: Maybe<Int>;
  createdAt?: Maybe<Int>;
  createdAt_not?: Maybe<Int>;
  createdAt_in?: Maybe<Int[] | Int>;
  createdAt_not_in?: Maybe<Int[] | Int>;
  createdAt_lt?: Maybe<Int>;
  createdAt_lte?: Maybe<Int>;
  createdAt_gt?: Maybe<Int>;
  createdAt_gte?: Maybe<Int>;
  updatedAt?: Maybe<Int>;
  updatedAt_not?: Maybe<Int>;
  updatedAt_in?: Maybe<Int[] | Int>;
  updatedAt_not_in?: Maybe<Int[] | Int>;
  updatedAt_lt?: Maybe<Int>;
  updatedAt_lte?: Maybe<Int>;
  updatedAt_gt?: Maybe<Int>;
  updatedAt_gte?: Maybe<Int>;
  AND?: Maybe<ColumnScalarWhereInput[] | ColumnScalarWhereInput>;
  OR?: Maybe<ColumnScalarWhereInput[] | ColumnScalarWhereInput>;
  NOT?: Maybe<ColumnScalarWhereInput[] | ColumnScalarWhereInput>;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface ColumnUpdateManyWithWhereNestedInput {
  where: ColumnScalarWhereInput;
  data: ColumnUpdateManyDataInput;
}

export interface UserUpdateManyMutationInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
}

export interface TaskUpdateInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  position?: Maybe<Int>;
  createdBy?: Maybe<UserUpdateOneRequiredInput>;
  column?: Maybe<ColumnUpdateOneRequiredWithoutTasksInput>;
}

export interface BoardCreateOneWithoutColumnsInput {
  create?: Maybe<BoardCreateWithoutColumnsInput>;
  connect?: Maybe<BoardWhereUniqueInput>;
}

export interface BoardCreateWithoutColumnsInput {
  id?: Maybe<ID_Input>;
  title: String;
  backgroundColor: String;
  createdBy: UserCreateOneInput;
}

export interface BoardUpdateManyMutationInput {
  title?: Maybe<String>;
  backgroundColor?: Maybe<String>;
}

export interface ColumnUpdateManyDataInput {
  title?: Maybe<String>;
  position?: Maybe<Int>;
}

export interface TaskCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  description?: Maybe<String>;
  position: Int;
  createdBy: UserCreateOneInput;
  column: ColumnCreateOneWithoutTasksInput;
}

export interface ColumnUpsertWithoutTasksInput {
  update: ColumnUpdateWithoutTasksDataInput;
  create: ColumnCreateWithoutTasksInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
  email: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
}

export interface BoardEdge {
  node: Board;
  cursor: String;
}

export interface BoardEdgePromise extends Promise<BoardEdge>, Fragmentable {
  node: <T = BoardPromise>() => T;
  cursor: () => Promise<String>;
}

export interface BoardEdgeSubscription
  extends Promise<AsyncIterator<BoardEdge>>,
    Fragmentable {
  node: <T = BoardSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Column {
  id: ID_Output;
  title: String;
  position: Int;
  createdAt: Int;
  updatedAt: Int;
}

export interface ColumnPromise extends Promise<Column>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  position: () => Promise<Int>;
  createdBy: <T = UserPromise>() => T;
  createdAt: () => Promise<Int>;
  updatedAt: () => Promise<Int>;
  board: <T = BoardPromise>() => T;
  tasks: <T = FragmentableArray<Task>>(args?: {
    where?: TaskWhereInput;
    orderBy?: TaskOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ColumnSubscription
  extends Promise<AsyncIterator<Column>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  position: () => Promise<AsyncIterator<Int>>;
  createdBy: <T = UserSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<Int>>;
  updatedAt: () => Promise<AsyncIterator<Int>>;
  board: <T = BoardSubscription>() => T;
  tasks: <T = Promise<AsyncIterator<TaskSubscription>>>(args?: {
    where?: TaskWhereInput;
    orderBy?: TaskOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ColumnNullablePromise
  extends Promise<Column | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  position: () => Promise<Int>;
  createdBy: <T = UserPromise>() => T;
  createdAt: () => Promise<Int>;
  updatedAt: () => Promise<Int>;
  board: <T = BoardPromise>() => T;
  tasks: <T = FragmentableArray<Task>>(args?: {
    where?: TaskWhereInput;
    orderBy?: TaskOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface TaskPreviousValues {
  id: ID_Output;
  title: String;
  description?: String;
  position: Int;
  createdAt: Int;
  updatedAt: Int;
}

export interface TaskPreviousValuesPromise
  extends Promise<TaskPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  position: () => Promise<Int>;
  createdAt: () => Promise<Int>;
  updatedAt: () => Promise<Int>;
}

export interface TaskPreviousValuesSubscription
  extends Promise<AsyncIterator<TaskPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  position: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<Int>>;
  updatedAt: () => Promise<AsyncIterator<Int>>;
}

export interface Task {
  id: ID_Output;
  title: String;
  description?: String;
  position: Int;
  createdAt: Int;
  updatedAt: Int;
}

export interface TaskPromise extends Promise<Task>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  position: () => Promise<Int>;
  createdBy: <T = UserPromise>() => T;
  createdAt: () => Promise<Int>;
  updatedAt: () => Promise<Int>;
  column: <T = ColumnPromise>() => T;
}

export interface TaskSubscription
  extends Promise<AsyncIterator<Task>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  position: () => Promise<AsyncIterator<Int>>;
  createdBy: <T = UserSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<Int>>;
  updatedAt: () => Promise<AsyncIterator<Int>>;
  column: <T = ColumnSubscription>() => T;
}

export interface TaskNullablePromise
  extends Promise<Task | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  position: () => Promise<Int>;
  createdBy: <T = UserPromise>() => T;
  createdAt: () => Promise<Int>;
  updatedAt: () => Promise<Int>;
  column: <T = ColumnPromise>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface Board {
  id: ID_Output;
  title: String;
  backgroundColor: String;
  createdAt: Int;
  updatedAt: Int;
}

export interface BoardPromise extends Promise<Board>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  backgroundColor: () => Promise<String>;
  createdBy: <T = UserPromise>() => T;
  createdAt: () => Promise<Int>;
  updatedAt: () => Promise<Int>;
  columns: <T = FragmentableArray<Column>>(args?: {
    where?: ColumnWhereInput;
    orderBy?: ColumnOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface BoardSubscription
  extends Promise<AsyncIterator<Board>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  backgroundColor: () => Promise<AsyncIterator<String>>;
  createdBy: <T = UserSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<Int>>;
  updatedAt: () => Promise<AsyncIterator<Int>>;
  columns: <T = Promise<AsyncIterator<ColumnSubscription>>>(args?: {
    where?: ColumnWhereInput;
    orderBy?: ColumnOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface BoardNullablePromise
  extends Promise<Board | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  backgroundColor: () => Promise<String>;
  createdBy: <T = UserPromise>() => T;
  createdAt: () => Promise<Int>;
  updatedAt: () => Promise<Int>;
  columns: <T = FragmentableArray<Column>>(args?: {
    where?: ColumnWhereInput;
    orderBy?: ColumnOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface TaskEdge {
  node: Task;
  cursor: String;
}

export interface TaskEdgePromise extends Promise<TaskEdge>, Fragmentable {
  node: <T = TaskPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TaskEdgeSubscription
  extends Promise<AsyncIterator<TaskEdge>>,
    Fragmentable {
  node: <T = TaskSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BoardSubscriptionPayload {
  mutation: MutationType;
  node: Board;
  updatedFields: String[];
  previousValues: BoardPreviousValues;
}

export interface BoardSubscriptionPayloadPromise
  extends Promise<BoardSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = BoardPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = BoardPreviousValuesPromise>() => T;
}

export interface BoardSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<BoardSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = BoardSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = BoardPreviousValuesSubscription>() => T;
}

export interface AggregateColumn {
  count: Int;
}

export interface AggregateColumnPromise
  extends Promise<AggregateColumn>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateColumnSubscription
  extends Promise<AsyncIterator<AggregateColumn>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BoardPreviousValues {
  id: ID_Output;
  title: String;
  backgroundColor: String;
  createdAt: Int;
  updatedAt: Int;
}

export interface BoardPreviousValuesPromise
  extends Promise<BoardPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  backgroundColor: () => Promise<String>;
  createdAt: () => Promise<Int>;
  updatedAt: () => Promise<Int>;
}

export interface BoardPreviousValuesSubscription
  extends Promise<AsyncIterator<BoardPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  backgroundColor: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<Int>>;
  updatedAt: () => Promise<AsyncIterator<Int>>;
}

export interface ColumnConnection {
  pageInfo: PageInfo;
  edges: ColumnEdge[];
}

export interface ColumnConnectionPromise
  extends Promise<ColumnConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ColumnEdge>>() => T;
  aggregate: <T = AggregateColumnPromise>() => T;
}

export interface ColumnConnectionSubscription
  extends Promise<AsyncIterator<ColumnConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ColumnEdgeSubscription>>>() => T;
  aggregate: <T = AggregateColumnSubscription>() => T;
}

export interface BoardConnection {
  pageInfo: PageInfo;
  edges: BoardEdge[];
}

export interface BoardConnectionPromise
  extends Promise<BoardConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<BoardEdge>>() => T;
  aggregate: <T = AggregateBoardPromise>() => T;
}

export interface BoardConnectionSubscription
  extends Promise<AsyncIterator<BoardConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<BoardEdgeSubscription>>>() => T;
  aggregate: <T = AggregateBoardSubscription>() => T;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TaskSubscriptionPayload {
  mutation: MutationType;
  node: Task;
  updatedFields: String[];
  previousValues: TaskPreviousValues;
}

export interface TaskSubscriptionPayloadPromise
  extends Promise<TaskSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TaskPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TaskPreviousValuesPromise>() => T;
}

export interface TaskSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TaskSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TaskSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TaskPreviousValuesSubscription>() => T;
}

export interface User {
  id: ID_Output;
  name: String;
  email: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
}

export interface ColumnPreviousValues {
  id: ID_Output;
  title: String;
  position: Int;
  createdAt: Int;
  updatedAt: Int;
}

export interface ColumnPreviousValuesPromise
  extends Promise<ColumnPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  position: () => Promise<Int>;
  createdAt: () => Promise<Int>;
  updatedAt: () => Promise<Int>;
}

export interface ColumnPreviousValuesSubscription
  extends Promise<AsyncIterator<ColumnPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  position: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<Int>>;
  updatedAt: () => Promise<AsyncIterator<Int>>;
}

export interface ColumnSubscriptionPayload {
  mutation: MutationType;
  node: Column;
  updatedFields: String[];
  previousValues: ColumnPreviousValues;
}

export interface ColumnSubscriptionPayloadPromise
  extends Promise<ColumnSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ColumnPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ColumnPreviousValuesPromise>() => T;
}

export interface ColumnSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ColumnSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ColumnSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ColumnPreviousValuesSubscription>() => T;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface AggregateBoard {
  count: Int;
}

export interface AggregateBoardPromise
  extends Promise<AggregateBoard>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateBoardSubscription
  extends Promise<AsyncIterator<AggregateBoard>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ColumnEdge {
  node: Column;
  cursor: String;
}

export interface ColumnEdgePromise extends Promise<ColumnEdge>, Fragmentable {
  node: <T = ColumnPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ColumnEdgeSubscription
  extends Promise<AsyncIterator<ColumnEdge>>,
    Fragmentable {
  node: <T = ColumnSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface TaskConnection {
  pageInfo: PageInfo;
  edges: TaskEdge[];
}

export interface TaskConnectionPromise
  extends Promise<TaskConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TaskEdge>>() => T;
  aggregate: <T = AggregateTaskPromise>() => T;
}

export interface TaskConnectionSubscription
  extends Promise<AsyncIterator<TaskConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TaskEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTaskSubscription>() => T;
}

export interface AggregateTask {
  count: Int;
}

export interface AggregateTaskPromise
  extends Promise<AggregateTask>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTaskSubscription
  extends Promise<AsyncIterator<AggregateTask>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Board",
    embedded: false
  },
  {
    name: "Column",
    embedded: false
  },
  {
    name: "Task",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
